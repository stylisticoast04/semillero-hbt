import * as tslib_1 from "tslib";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { APP_ID, NgModule, NgZone, PLATFORM_INITIALIZER, createPlatformFactory, platformCore } from '@angular/core';
import { BrowserModule, ɵBrowserDomAdapter as BrowserDomAdapter, ɵELEMENT_PROBE_PROVIDERS as ELEMENT_PROBE_PROVIDERS } from '@angular/platform-browser';
import { BrowserDetection, createNgZone } from './browser_util';
import * as ɵngcc0 from '@angular/core';
function initBrowserTests() {
    BrowserDomAdapter.makeCurrent();
    BrowserDetection.setup();
}
var _TEST_BROWSER_PLATFORM_PROVIDERS = [{ provide: PLATFORM_INITIALIZER, useValue: initBrowserTests, multi: true }];
/**
 * Platform for testing
 *
 * @publicApi
 */
export var platformBrowserTesting = createPlatformFactory(platformCore, 'browserTesting', _TEST_BROWSER_PLATFORM_PROVIDERS);
var ɵ0 = createNgZone;
/**
 * NgModule for testing.
 *
 * @publicApi
 */
var BrowserTestingModule = /** @class */ (function () {
    function BrowserTestingModule() {
    }
BrowserTestingModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: BrowserTestingModule });
/*@__PURE__*/ ɵngcc0.ɵɵsetNgModuleScope(BrowserTestingModule, { exports: function () { return [BrowserModule]; } });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(BrowserTestingModule, [{
        type: NgModule,
        args: [{
                exports: [BrowserModule],
                providers: [
                    { provide: APP_ID, useValue: 'a' },
                    ELEMENT_PROBE_PROVIDERS,
                    { provide: NgZone, useFactory: ɵ0 },
                ]
            }]
    }], function () { return []; }, null);
BrowserTestingModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function BrowserTestingModule_Factory(t) { return new (t || BrowserTestingModule)(); }, providers: [
        { provide: APP_ID, useValue: 'a' },
        ELEMENT_PROBE_PROVIDERS,
        { provide: NgZone, useFactory: ɵ0 },
    ], imports: [BrowserModule] });
    return BrowserTestingModule;
}());
export { BrowserTestingModule };
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1NlbWlsbGVyby9NYXRlcmlhbHNlc2lvbjMvc2VtaWxsZXJvLWhidC9zZW1pbGxlcm8tcGFkcmUvc2VtaWxsZXJvLXdlYi9zcmMvbWFpbi9hbmd1bGFyL25vZGVfbW9kdWxlcy9AYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyL2VzbTUvdGVzdGluZy9zcmMvYnJvd3Nlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7O0FBV0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FtQks7Ozs7Ozs7Ozs7Ozs7Ozs7OzttQ0FVd0IiLCJmaWxlIjoiYnJvd3Nlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgeyBBUFBfSUQsIE5nTW9kdWxlLCBOZ1pvbmUsIFBMQVRGT1JNX0lOSVRJQUxJWkVSLCBjcmVhdGVQbGF0Zm9ybUZhY3RvcnksIHBsYXRmb3JtQ29yZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQnJvd3Nlck1vZHVsZSwgybVCcm93c2VyRG9tQWRhcHRlciBhcyBCcm93c2VyRG9tQWRhcHRlciwgybVFTEVNRU5UX1BST0JFX1BST1ZJREVSUyBhcyBFTEVNRU5UX1BST0JFX1BST1ZJREVSUyB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgQnJvd3NlckRldGVjdGlvbiwgY3JlYXRlTmdab25lIH0gZnJvbSAnLi9icm93c2VyX3V0aWwnO1xuZnVuY3Rpb24gaW5pdEJyb3dzZXJUZXN0cygpIHtcbiAgICBCcm93c2VyRG9tQWRhcHRlci5tYWtlQ3VycmVudCgpO1xuICAgIEJyb3dzZXJEZXRlY3Rpb24uc2V0dXAoKTtcbn1cbnZhciBfVEVTVF9CUk9XU0VSX1BMQVRGT1JNX1BST1ZJREVSUyA9IFt7IHByb3ZpZGU6IFBMQVRGT1JNX0lOSVRJQUxJWkVSLCB1c2VWYWx1ZTogaW5pdEJyb3dzZXJUZXN0cywgbXVsdGk6IHRydWUgfV07XG4vKipcbiAqIFBsYXRmb3JtIGZvciB0ZXN0aW5nXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgdmFyIHBsYXRmb3JtQnJvd3NlclRlc3RpbmcgPSBjcmVhdGVQbGF0Zm9ybUZhY3RvcnkocGxhdGZvcm1Db3JlLCAnYnJvd3NlclRlc3RpbmcnLCBfVEVTVF9CUk9XU0VSX1BMQVRGT1JNX1BST1ZJREVSUyk7XG52YXIgybUwID0gY3JlYXRlTmdab25lO1xuLyoqXG4gKiBOZ01vZHVsZSBmb3IgdGVzdGluZy5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbnZhciBCcm93c2VyVGVzdGluZ01vZHVsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCcm93c2VyVGVzdGluZ01vZHVsZSgpIHtcbiAgICB9XG4gICAgQnJvd3NlclRlc3RpbmdNb2R1bGUgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgICAgICBOZ01vZHVsZSh7XG4gICAgICAgICAgICBleHBvcnRzOiBbQnJvd3Nlck1vZHVsZV0sXG4gICAgICAgICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgICAgICAgICB7IHByb3ZpZGU6IEFQUF9JRCwgdXNlVmFsdWU6ICdhJyB9LFxuICAgICAgICAgICAgICAgIEVMRU1FTlRfUFJPQkVfUFJPVklERVJTLFxuICAgICAgICAgICAgICAgIHsgcHJvdmlkZTogTmdab25lLCB1c2VGYWN0b3J5OiDJtTAgfSxcbiAgICAgICAgICAgIF1cbiAgICAgICAgfSlcbiAgICBdLCBCcm93c2VyVGVzdGluZ01vZHVsZSk7XG4gICAgcmV0dXJuIEJyb3dzZXJUZXN0aW5nTW9kdWxlO1xufSgpKTtcbmV4cG9ydCB7IEJyb3dzZXJUZXN0aW5nTW9kdWxlIH07XG5leHBvcnQgeyDJtTAgfTtcbiJdfQ==
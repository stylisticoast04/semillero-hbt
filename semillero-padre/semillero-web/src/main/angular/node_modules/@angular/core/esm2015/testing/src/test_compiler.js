/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Compiler, Injectable } from '@angular/core';
/**
 * @return {?}
 */
import * as ɵngcc0 from '@angular/core';
function unimplemented() {
    throw Error('unimplemented');
}
/**
 * Special interface to the compiler only used by testing
 *
 * \@publicApi
 */
export class TestingCompiler extends Compiler {
    /**
     * @return {?}
     */
    get injector() { throw unimplemented(); }
    /**
     * @param {?} module
     * @param {?} overrides
     * @return {?}
     */
    overrideModule(module, overrides) {
        throw unimplemented();
    }
    /**
     * @param {?} directive
     * @param {?} overrides
     * @return {?}
     */
    overrideDirective(directive, overrides) {
        throw unimplemented();
    }
    /**
     * @param {?} component
     * @param {?} overrides
     * @return {?}
     */
    overrideComponent(component, overrides) {
        throw unimplemented();
    }
    /**
     * @param {?} directive
     * @param {?} overrides
     * @return {?}
     */
    overridePipe(directive, overrides) {
        throw unimplemented();
    }
    /**
     * Allows to pass the compile summary from AOT compilation to the JIT compiler,
     * so that it can use the code generated by AOT.
     * @param {?} summaries
     * @return {?}
     */
    loadAotSummaries(summaries) { throw unimplemented(); }
    /**
     * Gets the component factory for the given component.
     * This assumes that the component has been compiled before calling this call using
     * `compileModuleAndAllComponents*`.
     * @template T
     * @param {?} component
     * @return {?}
     */
    getComponentFactory(component) { throw unimplemented(); }
    /**
     * Returns the component type that is stored in the given error.
     * This can be used for errors created by compileModule...
     * @param {?} error
     * @return {?}
     */
    getComponentFromError(error) { throw unimplemented(); }
}
TestingCompiler.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: TestingCompiler, factory: function TestingCompiler_Factory(t) { return ɵTestingCompiler_BaseFactory(t || TestingCompiler); }, providedIn: null });
const ɵTestingCompiler_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TestingCompiler);
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(TestingCompiler, [{
        type: Injectable
    }], null, { injector: [], overrideModule: [], overrideDirective: [], overrideComponent: [], overridePipe: [], loadAotSummaries: [], getComponentFactory: [], getComponentFromError: [] });
/**
 * A factory for creating a Compiler
 *
 * \@publicApi
 * @abstract
 */
export class TestingCompilerFactory {
}
if (false) {
    /**
     * @abstract
     * @param {?=} options
     * @return {?}
     */
    TestingCompilerFactory.prototype.createTestingCompiler = function (options) { };
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1NlbWlsbGVyby9NYXRlcmlhbHNlc2lvbjMvc2VtaWxsZXJvLWhidC9zZW1pbGxlcm8tcGFkcmUvc2VtaWxsZXJvLXdlYi9zcmMvbWFpbi9hbmd1bGFyL25vZGVfbW9kdWxlcy9AYW5ndWxhci9jb3JlL2VzbTIwMTUvdGVzdGluZy9zcmMvdGVzdF9jb21waWxlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7OztBQWVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBb0VDLDZMQUdDIiwiZmlsZSI6InRlc3RfY29tcGlsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzLGNvbnN0YW50UHJvcGVydHksZXh0cmFSZXF1aXJlLG1pc3NpbmdPdmVycmlkZSxtaXNzaW5nUmV0dXJuLHVudXNlZFByaXZhdGVNZW1iZXJzLHVzZWxlc3NDb2RlfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgeyBDb21waWxlciwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuLyoqXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiB1bmltcGxlbWVudGVkKCkge1xuICAgIHRocm93IEVycm9yKCd1bmltcGxlbWVudGVkJyk7XG59XG4vKipcbiAqIFNwZWNpYWwgaW50ZXJmYWNlIHRvIHRoZSBjb21waWxlciBvbmx5IHVzZWQgYnkgdGVzdGluZ1xuICpcbiAqIFxcQHB1YmxpY0FwaVxuICovXG5leHBvcnQgY2xhc3MgVGVzdGluZ0NvbXBpbGVyIGV4dGVuZHMgQ29tcGlsZXIge1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZ2V0IGluamVjdG9yKCkgeyB0aHJvdyB1bmltcGxlbWVudGVkKCk7IH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IG1vZHVsZVxuICAgICAqIEBwYXJhbSB7P30gb3ZlcnJpZGVzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBvdmVycmlkZU1vZHVsZShtb2R1bGUsIG92ZXJyaWRlcykge1xuICAgICAgICB0aHJvdyB1bmltcGxlbWVudGVkKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZGlyZWN0aXZlXG4gICAgICogQHBhcmFtIHs/fSBvdmVycmlkZXNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIG92ZXJyaWRlRGlyZWN0aXZlKGRpcmVjdGl2ZSwgb3ZlcnJpZGVzKSB7XG4gICAgICAgIHRocm93IHVuaW1wbGVtZW50ZWQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBjb21wb25lbnRcbiAgICAgKiBAcGFyYW0gez99IG92ZXJyaWRlc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgb3ZlcnJpZGVDb21wb25lbnQoY29tcG9uZW50LCBvdmVycmlkZXMpIHtcbiAgICAgICAgdGhyb3cgdW5pbXBsZW1lbnRlZCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGRpcmVjdGl2ZVxuICAgICAqIEBwYXJhbSB7P30gb3ZlcnJpZGVzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBvdmVycmlkZVBpcGUoZGlyZWN0aXZlLCBvdmVycmlkZXMpIHtcbiAgICAgICAgdGhyb3cgdW5pbXBsZW1lbnRlZCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgdG8gcGFzcyB0aGUgY29tcGlsZSBzdW1tYXJ5IGZyb20gQU9UIGNvbXBpbGF0aW9uIHRvIHRoZSBKSVQgY29tcGlsZXIsXG4gICAgICogc28gdGhhdCBpdCBjYW4gdXNlIHRoZSBjb2RlIGdlbmVyYXRlZCBieSBBT1QuXG4gICAgICogQHBhcmFtIHs/fSBzdW1tYXJpZXNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGxvYWRBb3RTdW1tYXJpZXMoc3VtbWFyaWVzKSB7IHRocm93IHVuaW1wbGVtZW50ZWQoKTsgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGNvbXBvbmVudCBmYWN0b3J5IGZvciB0aGUgZ2l2ZW4gY29tcG9uZW50LlxuICAgICAqIFRoaXMgYXNzdW1lcyB0aGF0IHRoZSBjb21wb25lbnQgaGFzIGJlZW4gY29tcGlsZWQgYmVmb3JlIGNhbGxpbmcgdGhpcyBjYWxsIHVzaW5nXG4gICAgICogYGNvbXBpbGVNb2R1bGVBbmRBbGxDb21wb25lbnRzKmAuXG4gICAgICogQHRlbXBsYXRlIFRcbiAgICAgKiBAcGFyYW0gez99IGNvbXBvbmVudFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZ2V0Q29tcG9uZW50RmFjdG9yeShjb21wb25lbnQpIHsgdGhyb3cgdW5pbXBsZW1lbnRlZCgpOyB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY29tcG9uZW50IHR5cGUgdGhhdCBpcyBzdG9yZWQgaW4gdGhlIGdpdmVuIGVycm9yLlxuICAgICAqIFRoaXMgY2FuIGJlIHVzZWQgZm9yIGVycm9ycyBjcmVhdGVkIGJ5IGNvbXBpbGVNb2R1bGUuLi5cbiAgICAgKiBAcGFyYW0gez99IGVycm9yXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBnZXRDb21wb25lbnRGcm9tRXJyb3IoZXJyb3IpIHsgdGhyb3cgdW5pbXBsZW1lbnRlZCgpOyB9XG59XG5UZXN0aW5nQ29tcGlsZXIuZGVjb3JhdG9ycyA9IFtcbiAgICB7IHR5cGU6IEluamVjdGFibGUgfVxuXTtcbi8qKlxuICogQSBmYWN0b3J5IGZvciBjcmVhdGluZyBhIENvbXBpbGVyXG4gKlxuICogXFxAcHVibGljQXBpXG4gKiBAYWJzdHJhY3RcbiAqL1xuZXhwb3J0IGNsYXNzIFRlc3RpbmdDb21waWxlckZhY3Rvcnkge1xufVxuaWYgKGZhbHNlKSB7XG4gICAgLyoqXG4gICAgICogQGFic3RyYWN0XG4gICAgICogQHBhcmFtIHs/PX0gb3B0aW9uc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVGVzdGluZ0NvbXBpbGVyRmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlVGVzdGluZ0NvbXBpbGVyID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsgfTtcbn1cbiJdfQ==
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as tslib_1 from "tslib";
import { Compiler, Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
function unimplemented() {
    throw Error('unimplemented');
}
/**
 * Special interface to the compiler only used by testing
 *
 * @publicApi
 */
var TestingCompiler = /** @class */ (function (_super) {
    tslib_1.__extends(TestingCompiler, _super);
    function TestingCompiler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(TestingCompiler.prototype, "injector", {
        get: function () { throw unimplemented(); },
        enumerable: true,
        configurable: true
    });
    TestingCompiler.prototype.overrideModule = function (module, overrides) {
        throw unimplemented();
    };
    TestingCompiler.prototype.overrideDirective = function (directive, overrides) {
        throw unimplemented();
    };
    TestingCompiler.prototype.overrideComponent = function (component, overrides) {
        throw unimplemented();
    };
    TestingCompiler.prototype.overridePipe = function (directive, overrides) {
        throw unimplemented();
    };
    /**
     * Allows to pass the compile summary from AOT compilation to the JIT compiler,
     * so that it can use the code generated by AOT.
     */
    TestingCompiler.prototype.loadAotSummaries = function (summaries) { throw unimplemented(); };
    /**
     * Gets the component factory for the given component.
     * This assumes that the component has been compiled before calling this call using
     * `compileModuleAndAllComponents*`.
     */
    TestingCompiler.prototype.getComponentFactory = function (component) { throw unimplemented(); };
    /**
     * Returns the component type that is stored in the given error.
     * This can be used for errors created by compileModule...
     */
    TestingCompiler.prototype.getComponentFromError = function (error) { throw unimplemented(); };
TestingCompiler.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: TestingCompiler, factory: function TestingCompiler_Factory(t) { return ɵTestingCompiler_BaseFactory(t || TestingCompiler); }, providedIn: null });
const ɵTestingCompiler_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TestingCompiler);
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(TestingCompiler, [{
        type: Injectable
    }], null, { injector: [], overrideModule: [], overrideDirective: [], overrideComponent: [], overridePipe: [], loadAotSummaries: [], getComponentFactory: [], getComponentFromError: [] });
    return TestingCompiler;
}(Compiler));
export { TestingCompiler };
/**
 * A factory for creating a Compiler
 *
 * @publicApi
 */
var TestingCompilerFactory = /** @class */ (function () {
    function TestingCompilerFactory() {
    }
    return TestingCompilerFactory;
}());
export { TestingCompilerFactory };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1NlbWlsbGVyby9NYXRlcmlhbHNlc2lvbjMvc2VtaWxsZXJvLWhidC9zZW1pbGxlcm8tcGFkcmUvc2VtaWxsZXJvLXdlYi9zcmMvbWFpbi9hbmd1bGFyL25vZGVfbW9kdWxlcy9AYW5ndWxhci9jb3JlL2VzbTUvdGVzdGluZy9zcmMvdGVzdF9jb21waWxlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztBQVNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a0dBNkNrRzs7Ozs7OExBRzFFIiwiZmlsZSI6InRlc3RfY29tcGlsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQ29tcGlsZXIsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmZ1bmN0aW9uIHVuaW1wbGVtZW50ZWQoKSB7XG4gICAgdGhyb3cgRXJyb3IoJ3VuaW1wbGVtZW50ZWQnKTtcbn1cbi8qKlxuICogU3BlY2lhbCBpbnRlcmZhY2UgdG8gdGhlIGNvbXBpbGVyIG9ubHkgdXNlZCBieSB0ZXN0aW5nXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG52YXIgVGVzdGluZ0NvbXBpbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFRlc3RpbmdDb21waWxlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUZXN0aW5nQ29tcGlsZXIoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRlc3RpbmdDb21waWxlci5wcm90b3R5cGUsIFwiaW5qZWN0b3JcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgdGhyb3cgdW5pbXBsZW1lbnRlZCgpOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBUZXN0aW5nQ29tcGlsZXIucHJvdG90eXBlLm92ZXJyaWRlTW9kdWxlID0gZnVuY3Rpb24gKG1vZHVsZSwgb3ZlcnJpZGVzKSB7XG4gICAgICAgIHRocm93IHVuaW1wbGVtZW50ZWQoKTtcbiAgICB9O1xuICAgIFRlc3RpbmdDb21waWxlci5wcm90b3R5cGUub3ZlcnJpZGVEaXJlY3RpdmUgPSBmdW5jdGlvbiAoZGlyZWN0aXZlLCBvdmVycmlkZXMpIHtcbiAgICAgICAgdGhyb3cgdW5pbXBsZW1lbnRlZCgpO1xuICAgIH07XG4gICAgVGVzdGluZ0NvbXBpbGVyLnByb3RvdHlwZS5vdmVycmlkZUNvbXBvbmVudCA9IGZ1bmN0aW9uIChjb21wb25lbnQsIG92ZXJyaWRlcykge1xuICAgICAgICB0aHJvdyB1bmltcGxlbWVudGVkKCk7XG4gICAgfTtcbiAgICBUZXN0aW5nQ29tcGlsZXIucHJvdG90eXBlLm92ZXJyaWRlUGlwZSA9IGZ1bmN0aW9uIChkaXJlY3RpdmUsIG92ZXJyaWRlcykge1xuICAgICAgICB0aHJvdyB1bmltcGxlbWVudGVkKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBbGxvd3MgdG8gcGFzcyB0aGUgY29tcGlsZSBzdW1tYXJ5IGZyb20gQU9UIGNvbXBpbGF0aW9uIHRvIHRoZSBKSVQgY29tcGlsZXIsXG4gICAgICogc28gdGhhdCBpdCBjYW4gdXNlIHRoZSBjb2RlIGdlbmVyYXRlZCBieSBBT1QuXG4gICAgICovXG4gICAgVGVzdGluZ0NvbXBpbGVyLnByb3RvdHlwZS5sb2FkQW90U3VtbWFyaWVzID0gZnVuY3Rpb24gKHN1bW1hcmllcykgeyB0aHJvdyB1bmltcGxlbWVudGVkKCk7IH07XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgY29tcG9uZW50IGZhY3RvcnkgZm9yIHRoZSBnaXZlbiBjb21wb25lbnQuXG4gICAgICogVGhpcyBhc3N1bWVzIHRoYXQgdGhlIGNvbXBvbmVudCBoYXMgYmVlbiBjb21waWxlZCBiZWZvcmUgY2FsbGluZyB0aGlzIGNhbGwgdXNpbmdcbiAgICAgKiBgY29tcGlsZU1vZHVsZUFuZEFsbENvbXBvbmVudHMqYC5cbiAgICAgKi9cbiAgICBUZXN0aW5nQ29tcGlsZXIucHJvdG90eXBlLmdldENvbXBvbmVudEZhY3RvcnkgPSBmdW5jdGlvbiAoY29tcG9uZW50KSB7IHRocm93IHVuaW1wbGVtZW50ZWQoKTsgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjb21wb25lbnQgdHlwZSB0aGF0IGlzIHN0b3JlZCBpbiB0aGUgZ2l2ZW4gZXJyb3IuXG4gICAgICogVGhpcyBjYW4gYmUgdXNlZCBmb3IgZXJyb3JzIGNyZWF0ZWQgYnkgY29tcGlsZU1vZHVsZS4uLlxuICAgICAqL1xuICAgIFRlc3RpbmdDb21waWxlci5wcm90b3R5cGUuZ2V0Q29tcG9uZW50RnJvbUVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7IHRocm93IHVuaW1wbGVtZW50ZWQoKTsgfTtcbiAgICBUZXN0aW5nQ29tcGlsZXIgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgICAgICBJbmplY3RhYmxlKClcbiAgICBdLCBUZXN0aW5nQ29tcGlsZXIpO1xuICAgIHJldHVybiBUZXN0aW5nQ29tcGlsZXI7XG59KENvbXBpbGVyKSk7XG5leHBvcnQgeyBUZXN0aW5nQ29tcGlsZXIgfTtcbi8qKlxuICogQSBmYWN0b3J5IGZvciBjcmVhdGluZyBhIENvbXBpbGVyXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG52YXIgVGVzdGluZ0NvbXBpbGVyRmFjdG9yeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUZXN0aW5nQ29tcGlsZXJGYWN0b3J5KCkge1xuICAgIH1cbiAgICByZXR1cm4gVGVzdGluZ0NvbXBpbGVyRmFjdG9yeTtcbn0oKSk7XG5leHBvcnQgeyBUZXN0aW5nQ29tcGlsZXJGYWN0b3J5IH07XG4iXX0=